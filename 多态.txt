1.多态性的理解:
    多态性可以理解为一个事物的多种形态

2.对象的多态性:父类的引用指向子类的对象 Person ap = new Man();
                                Person ap = new Woman();

3.何为多态性:
    父类的引用指向子类的对象(或子类的对象赋给父类的引用)

4.多态的使用:
    当调用子父类同名同参数的方法时,实际执行的是子类重写父类的方法---->虚拟方法调用
    有了对象的多态性后,我们在编译期只能调用父类中声明的方法.在执行期,我们实际执行的是子类重写父类的方法
    Person ap = new Man();
    编译时看左边声明的类型 即Person,当使用".xx"调用时只能调用左边类型所拥有的
    执行时看右边,即会执行的是右边类中所重写的方法

5.多态性的使用前提:
        5.1有类的继承关系
        5.2有方法的重写

6.多态的好处举例:
        工厂或
        p278
        class Driver{
            public void doData(Connection conn){
                conn 可能是 new MySQLConnection  可能是 new OracleConnection
                conn.xx1();
                conn.xx2();
                conn.xx3();
            }
            //此时传的实参只需是conn的子类就行,编译时可调用Connection声明的方法,执行时执行的是具体子类中重写的方法
        }
        规范的步骤去操作数据,统一接口

多态性不适用于属性,只适用于方法
        子类父类同名属性,调用时会调父类的属性,编译和运行都看左边


虚拟方法调用(多态情况下)
    子类中定义了与父类同名同参的方法,在多态情况下,将此时父类的方法称为虚拟方法,父类根据赋给它的不同子类对象
    动态调用属于子类的该方法.这样的方法调用在编译期是无法确定的
    
Person e = new Student();
e.getInfo();
编译时类型和运行时类型
    编译时e为Person类型,而方法的调用是在运行时确定的,所以调用的是student类的getInfo方法---动态绑定




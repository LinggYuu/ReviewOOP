this关键字
    在方法内部使用，即这个方法所属对象的引用；
    在构造器内部使用，表示该构造器器正在初始化的对象

this可以用来修饰、调用：属性、方法、构造器

this修饰属性、方法：
    this理解为：当前对象

    在类的方法中，我们可以使用this.属性或this.方法的方式，调用当前对象的属性或方法
    通常情况下我们都选择省略this.  特殊情况下，如果方法的形参和类的属性同名时，我们
    必须显式地使用'this.变量'的方式表明此变量是属性而非形参

this调用构造器：
    this(),()中输入参数
    1.我们在类的构造器中，可以显式地使用’this(形参列表)‘，调用本类中指定的类的其他构造器
    2.构造器中不能通过’this(形参列表)‘方式调用自己 如果构造器调用自己则会陷入死循环
    最终还是造了一个实例
    3.如果一个类中有n个构造器，则最多有n-1个构造器使用了’this(形参列表)‘
    4.规定“this(形参列表)”必须声明在当前构造器的首行
    5.构造器内部，最多只能声明一个’this(形参列表)‘，用来调用其他的构造器
    p231



package关键字：
    1.为了更好地实现项目中类的管理，提供包的概念
    2.使用package声明类或接口所属的包，声明在源文件的首行
    3.包，属于标识符，遵循标识符的命名规则、规范(xxxxyyyy)、见名知意
    4.每.一次就代表一层文件目录

    tips：同一个包下，不能命名同名的接口、类
          不同的包下，可以命名同名的接口、类


import关键字：
    import：导入
    1.在源文件中显式地使用import结构导入指定包下的类、接口
    2.声明在包的声明和类的声明之间
    3.如果需要导入多个结构，则并列写出即可
    4.可以使用xxx.*的方式，表示导入xxx包下的所有结构
    5.如果使用的类或接口是java.lang包下定义的，则可以省略import结构
    6.如果使用的类或接口是本地包下定义的，则可以省略import结构
    7.如果在源文件中，使用了不同包下的同名的类，则必须至少有一个类需要以全类名的方式显示
    8.如果使用xxx.*方式表面可以调用xxx包下所有结构，但如果使用的是xxx子包下的结构，则仍
    需要显式导入  如使用java.lang.reflect包下的  不能只输入import java.lang.*
    9.import static：导入指定类或接口中的静态结构：属性、方法（用得比较少）


super关键字
    super关键字：
        super可以理解为父类实例的
        super可以用来调用：属性、方法、构造器

    1.使用：我们可以在子类的方法或构造器中。通过使用super.属性或super.方法的方式，显式地调用父类
         声明的属性或方法。但是通常情况下，习惯省略”super.“
    2.特殊情况:
        当子类和父类中定义了同名的属性时,要想在子类中调用父类中声明的属性,必须显式地使用"super.属性"
        的方式,表明调用的是父类中声明的属性
    3.特殊情况2:
        当子类重写了父类的方法后,我想在子类的方法中调用父类中被重写方法时,则必须显式地使用"super.方法"
        的方式,表明调用的是父类中被重写方法

    4.super调用构造器
        4.1我们可以在子类构造器中显式地使用'super(形参列表)'的方式,调用父类中声明的指定构造器
        4.2'super(形参列表)'的使用 必须声明在子类构造器的首行
        4.3在类的构造器中,针对于'this(形参列表)'或'super(形参列表)',只能二选一,不能同时出现
        4.4在构造器的首行,没有显式地声明'this(形参列表)'或'super(形参列表)',则默认调用父类的空参构造器super()
        4.5在类的多个构造器中,至少有一个类的构造器中使用了super(形参列表)',调用父类中的构造器
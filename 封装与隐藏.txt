封装性
    在用一个东西如洗衣机时,只需要按开关就行,无需了解其内部运作

    高内聚低耦合是所追求的
        高内聚:类的内部数据操作细节自己完成,不允许外部干涉
        低耦合:仅对外暴露少量的方法用于使用

    隐藏对象内部的复杂性,只对外公开简单的接口,便于外界调用,从而提高系统的可扩展性、可维护性
    通俗地说,把该隐藏的隐藏起来,把该暴露的暴露出来.这就是封装性的设计思想

封装性的引入:
    当我们创建一个类的对象后,我们可以通过'对象.属性'的方式,对对象的属性进行赋值.这里,赋值操作
    要受到属性的数据类型和存储范围的制约.除此之外,没有其他制约条件.但是,在实际问题当中,我们往往
    需要给属性赋值加入额外的限制条件.这个条件不能在属性声明时体现,我们只能通过方法进行限制条件的
    添加(比如:setLegs方法中加if条件判断),同时我们需要避免用户再使用'对象.属性'的方式对属性进行
    赋值.则需要将属性声明为私有的(private)
    -->此时,针对于属性就体现了封装性.

封装性的体现:
    我们将类的属性xxx私有化(private),同时,提供公共(public)方法来获取(getXXX)和设置(setXXX)
    此属性的值
    同时可以设置不对外暴露的私有方法,仅供类内部使用
    拓展:封装性的体现:①如上 ②不对外暴露的私有方法 ③单例模式 ...
    详见p219

    看到p221四种权限